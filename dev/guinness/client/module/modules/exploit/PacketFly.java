package dev.guinness.client.module.modules.exploit;

import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.Packet;
import net.minecraft.util.math.Vec3d;
import dev.guinness.client.util.MotionUtil;
import net.minecraft.entity.Entity;
import dev.guinness.client.mixin.mixins.ISPacketPlayerPosLook;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import dev.guinness.client.event.events.PacketEvent$PacketReceiveEvent;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayer;
import dev.guinness.client.event.events.PacketEvent$PacketSendEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import dev.guinness.client.event.events.PlayerMoveEvent;
import dev.guinness.client.event.events.PlayerMoveEvent$PreMove;
import dev.guinness.client.module.Category;
import dev.guinness.client.setting.SSlider;
import dev.guinness.client.module.Module;

public class PacketFly extends Module
{
    public int teleports;
    public int teleportsToSend;
    public static SSlider speed;
    public static SSlider vspeed;
    
    public PacketFly() {
        super("PacketFly", Category.EXPLOIT, "Phase through blocks with packets");
    }
    
    @SubscribeEvent
    public void onMoveEvent(final PlayerMoveEvent$PreMove playerMoveEvent$PreMove) {
        final double[] motion = this.getXZMovement();
        this.setMotion(playerMoveEvent$PreMove, motion[0], motion[1]);
        this.processPackets(motion[0], motion[1]);
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent$PacketSendEvent packetEvent$PacketSendEvent) {
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayer) {
            if (!(packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayer.Position) && !(packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayerTryUseItemOnBlock)) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
    }
    
    @SubscribeEvent
    public void onPacketReceive(final PacketEvent$PacketReceiveEvent packetEvent$PacketReceiveEvent) {
        if (packetEvent$PacketReceiveEvent.getPacket() instanceof SPacketPlayerPosLook) {
            if (PacketFly.mc.player != null) {
                final SPacketPlayerPosLook packet = (SPacketPlayerPosLook)packetEvent$PacketReceiveEvent.getPacket();
                ((ISPacketPlayerPosLook)packet).setYaw(PacketFly.mc.player.field_70177_z);
                ((ISPacketPlayerPosLook)packet).setPitch(PacketFly.mc.player.field_70125_A);
                this.teleports = packet.getTeleportId();
                this.teleportsToSend = 1;
            }
        }
    }
    
    public void setMotion(final PlayerMoveEvent playerMoveEvent, final double x, final double z) {
        playerMoveEvent.setX(x);
        playerMoveEvent.setY(this.getMotionY());
        playerMoveEvent.setZ(z);
        PacketFly.mc.player.field_70145_X = true;
    }
    
    public double getMotionY() {
        double motionY = Double.longBitsToDouble(Double.doubleToLongBits(1.6321950544892477E307) ^ 0x7FB73E44433D674FL);
        if (PacketFly.mc.gameSettings.keyBindJump.isKeyDown()) {
            motionY = ((Double)PacketFly.vspeed.getValue()).floatValue() / Float.intBitsToFloat(Float.floatToIntBits(0.0641243f) ^ 0x7F4B539A);
        }
        if (PacketFly.mc.gameSettings.keyBindSneak.isKeyDown()) {
            if (!PacketFly.mc.gameSettings.keyBindJump.isKeyDown()) {
                motionY = -((Double)PacketFly.vspeed.getValue()).floatValue() / Float.intBitsToFloat(Float.floatToIntBits(0.64449304f) ^ 0x7DECFD7F);
            }
        }
        if (PacketFly.mc.world.func_184144_a(PacketFly.mc.player, PacketFly.mc.player.func_174813_aQ().expand(Double.longBitsToDouble(Double.doubleToLongBits(-71.65383795257607) ^ 0x7FE1E9D87B23CCA9L), Double.longBitsToDouble(Double.doubleToLongBits(-87.41905390230613) ^ 0x7FE5DAD1C7756AA0L), Double.longBitsToDouble(Double.doubleToLongBits(-117.56129725198892) ^ 0x7FED63EC4B4F2822L))).isEmpty() && PacketFly.mc.player.field_70173_aa % 20 == 0) {
            motionY = Double.longBitsToDouble(Double.doubleToLongBits(-373.0883787585268) ^ 0x7FD32B88B8764CF1L);
        }
        return motionY;
    }
    
    public double[] getXZMovement() {
        return MotionUtil.getPlayerMotion(((Double)PacketFly.speed.getValue()).floatValue() / Float.intBitsToFloat(Float.floatToIntBits(1.2905291f) ^ 0x7D6D300F));
    }
    
    public void processPackets(final double n, final double n2) {
        PacketFly.mc.player.field_70122_E = true;
        final Vec3d incrementPos = new Vec3d(n, this.getMotionY(), n2);
        final Vec3d movedPlayer = PacketFly.mc.player.func_174791_d().add(incrementPos);
        final Vec3d outOfBounds = this.getBoundingVectors(movedPlayer, incrementPos);
        final CPacketPlayer.Position legit = new CPacketPlayer.Position(movedPlayer.x, movedPlayer.y, movedPlayer.z, PacketFly.mc.player.field_70122_E);
        final CPacketPlayer.Position bounds = new CPacketPlayer.Position(outOfBounds.x, outOfBounds.y, outOfBounds.z, PacketFly.mc.player.field_70122_E);
        PacketFly.mc.player.connection.sendPacket((Packet)legit);
        PacketFly.mc.player.connection.sendPacket((Packet)bounds);
        if (this.teleportsToSend > 0) {
            final CPacketConfirmTeleport teleport = new CPacketConfirmTeleport(this.teleports);
            PacketFly.mc.player.connection.sendPacket((Packet)teleport);
            --this.teleportsToSend;
        }
    }
    
    public Vec3d getBoundingVectors(final Vec3d vec3d, final Vec3d vec3d2) {
        final Vec3d newvec = vec3d.add(vec3d2).addVector(Double.longBitsToDouble(Double.doubleToLongBits(1.523155978818951E308) ^ 0x7FEB1CF2934ED6B5L), Double.longBitsToDouble(Double.doubleToLongBits(-0.0012697770752642037) ^ 0x7FC02B164FE7C52BL), Double.longBitsToDouble(Double.doubleToLongBits(3.5029741267017745E307) ^ 0x7FC8F127278D9A1FL));
        return newvec;
    }
    
    static {
        PacketFly.speed = new SSlider("HSpeed", Double.longBitsToDouble(Double.doubleToLongBits(6.0755365448568135) ^ 0x7FE84D5973B7405CL), Double.longBitsToDouble(Double.doubleToLongBits(1.3689800257592026) ^ 0x7FE5E7579978354DL), Double.longBitsToDouble(Double.doubleToLongBits(0.22142336710967767) ^ 0x7FE85799D42733C7L), 1);
        PacketFly.vspeed = new SSlider("VSpeed", Double.longBitsToDouble(Double.doubleToLongBits(29.29339810988736) ^ 0x7FCD4B1C2376ACA7L), Double.longBitsToDouble(Double.doubleToLongBits(0.038632569403684085) ^ 0x7FAFC7A5EC4C6D8FL), Double.longBitsToDouble(Double.doubleToLongBits(0.14420425835958037) ^ 0x7FE67548FECC9627L), 1);
    }
}

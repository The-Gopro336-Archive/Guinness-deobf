package dev.guinness.client.module.modules.exploit;

import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketInput;
import dev.guinness.client.event.events.PacketEvent$PacketSendEvent;
import dev.guinness.client.module.Category;
import dev.guinness.client.setting.SBoolean;
import dev.guinness.client.module.Module;

public class PacketCanceller extends Module
{
    public static SBoolean entityaction;
    public static SBoolean useentity;
    public static SBoolean posrotation;
    public static SBoolean position;
    public static SBoolean digging;
    public static SBoolean useitem;
    public static SBoolean vehicle;
    public static SBoolean abilities;
    public static SBoolean input;
    public static SBoolean useitemblock;
    public static SBoolean rotation;
    
    public PacketCanceller() {
        super("PacketCanceller", Category.EXPLOIT, "Cancels certain packets");
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent$PacketSendEvent packetEvent$PacketSendEvent) {
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketInput) {
            if (PacketCanceller.input.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayer.Position) {
            if (PacketCanceller.position.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayer.Rotation) {
            if (PacketCanceller.rotation.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayer.PositionRotation) {
            if (PacketCanceller.posrotation.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayerAbilities) {
            if (PacketCanceller.abilities.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayerDigging && (boolean)PacketCanceller.digging.getValue()) {
            packetEvent$PacketSendEvent.setCanceled(true);
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayerTryUseItem) {
            if (PacketCanceller.useitem.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) {
            if (PacketCanceller.useitemblock.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketEntityAction && (boolean)PacketCanceller.entityaction.getValue()) {
            packetEvent$PacketSendEvent.setCanceled(true);
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketUseEntity) {
            if (PacketCanceller.useentity.getValue()) {
                packetEvent$PacketSendEvent.setCanceled(true);
            }
        }
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketVehicleMove && (boolean)PacketCanceller.vehicle.getValue()) {
            packetEvent$PacketSendEvent.setCanceled(true);
        }
    }
    
    static {
        PacketCanceller.input = new SBoolean("PacketInput", false);
        PacketCanceller.position = new SBoolean("PacketPosition", false);
        PacketCanceller.rotation = new SBoolean("PacketRotation", false);
        PacketCanceller.posrotation = new SBoolean("PacketPosRotation", false);
        PacketCanceller.abilities = new SBoolean("PacketAbilities", false);
        PacketCanceller.digging = new SBoolean("PacketDigging", false);
        PacketCanceller.useitem = new SBoolean("PacketUseItem", false);
        PacketCanceller.useitemblock = new SBoolean("PacketUseItemBlock", false);
        PacketCanceller.entityaction = new SBoolean("PacketEntityAction", false);
        PacketCanceller.useentity = new SBoolean("PacketUseEntity", false);
        PacketCanceller.vehicle = new SBoolean("PacketVehicleMove", false);
    }
}

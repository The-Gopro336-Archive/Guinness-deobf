package dev.guinness.client.module.modules.exploit;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.block.BlockLiquid;
import net.minecraft.world.World;
import dev.guinness.client.event.events.PacketEvent$PacketSendEvent;
import dev.guinness.client.util.RenderUtil;
import java.awt.Color;
import dev.guinness.client.util.ColorUtil;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import dev.guinness.client.event.events.DamageBlockEvent;
import dev.guinness.client.module.Category;
import net.minecraft.util.math.BlockPos;
import dev.guinness.client.module.Module;

public class InstantMine extends Module
{
    public BlockPos pos;
    public boolean didSelectBlock;
    
    public InstantMine() {
        super("InstantMine", Category.EXPLOIT, "Instantly mines a targetted block.");
        this.pos = null;
        this.didSelectBlock = false;
    }
    
    @SubscribeEvent
    public void onDamageBlock(final DamageBlockEvent damageBlockEvent) {
        if (!this.didSelectBlock) {
            if (this.canBreak(damageBlockEvent.getPos())) {
                InstantMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, damageBlockEvent.getPos(), damageBlockEvent.getDirection()));
                InstantMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, damageBlockEvent.getPos(), damageBlockEvent.getDirection()));
                this.didSelectBlock = true;
                this.pos = damageBlockEvent.getPos();
                damageBlockEvent.setCanceled(true);
            }
        }
        if (this.didSelectBlock && this.canBreak(damageBlockEvent.getPos())) {
            if (this.pos.equals(damageBlockEvent.getPos())) {
                InstantMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, damageBlockEvent.getPos(), damageBlockEvent.getDirection()));
            }
            else {
                this.pos = null;
                this.didSelectBlock = false;
            }
        }
    }
    
    @Override
    public void onRender3d() {
        if (this.pos != null) {
            RenderUtil.drawFilledBox(this.pos, Double.longBitsToDouble(Double.doubleToLongBits(1.332310801045085E308) ^ 0x7FE7B7467FBAB782L), new Color(ColorUtil.BESTCOLOR(0, 255)));
            RenderUtil.drawBlockOutline(this.pos, Double.longBitsToDouble(Double.doubleToLongBits(1.4517468623576412E308) ^ 0x7FE9D78A29929A5AL), new Color(ColorUtil.BESTCOLOR(0, 255)), new Color(ColorUtil.BESTCOLOR(0, 255)));
        }
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent$PacketSendEvent packetEvent$PacketSendEvent) {
        if (packetEvent$PacketSendEvent.getPacket() instanceof CPacketPlayerDigging) {
            final CPacketPlayerDigging packet = (CPacketPlayerDigging)packetEvent$PacketSendEvent.getPacket();
            packetEvent$PacketSendEvent.setCanceled(packet.getAction() == CPacketPlayerDigging.Action.START_DESTROY_BLOCK && this.didSelectBlock);
        }
    }
    
    public boolean canBreak(final BlockPos blockPos) {
        final IBlockState blockState = InstantMine.mc.world.func_180495_p(blockPos);
        final Block block = blockState.getBlock();
        return block.getBlockHardness(blockState, (World)InstantMine.mc.world, blockPos) != Float.intBitsToFloat(Float.floatToIntBits(-5.5161576f) ^ 0x7F30845D) && !(block instanceof BlockLiquid);
    }
}
